"""Directs the executor to return values as a Streaming response."""
directive @live on QUERY

"""Indicates that an input object is a oneOf input object"""
directive @oneOf on INPUT_OBJECT

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339
profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.

This scalar is a description of an exact instant on the timeline such as the instant that a user account was created.

# Input Coercion

When expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.

# Result Coercion

Where an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.
For example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.
"""
scalar DateTime

"""Possible operations for a Float field"""
input FloatOperationsInput {
  decrement: Float
  increment: Float
  set: Float
}

type KPI {
  """when the model was created"""
  createdAt: DateTime!

  """Unique identifier"""
  id: ID!
  target: Float!
  title: String!

  """when the model was updated"""
  updatedAt: DateTime!
}

input KPIByInput {
  id: ID
}

type KPIConnection {
  edges: [KPIEdge]

  """Information to aid in pagination"""
  pageInfo: PageInfo!
}

"""Input to create a KPI"""
input KPICreateInput {
  target: Float!
  title: String!
}

type KPICreatePayload {
  kPI: KPI
}

type KPIDeletePayload {
  deletedId: ID!
}

type KPIEdge {
  cursor: String!
  node: KPI!
}

input KPIOrderByInput {
  createdAt: OrderByDirection
}

"""Input to update a KPI"""
input KPIUpdateInput {
  target: FloatOperationsInput
  title: String
}

type KPIUpdatePayload {
  kPI: KPI
}

type Mutation {
  """Create a KPI"""
  kPICreate(input: KPICreateInput!): KPICreatePayload

  """Delete a KPI by ID or unique field"""
  kPIDelete(by: KPIByInput!): KPIDeletePayload

  """Update a KPI"""
  kPIUpdate(by: KPIByInput!, input: KPIUpdateInput!): KPIUpdatePayload

  """Create a Pricing"""
  pricingCreate(input: PricingCreateInput!): PricingCreatePayload

  """Delete a Pricing by ID or unique field"""
  pricingDelete(by: PricingByInput!): PricingDeletePayload

  """Update a Pricing"""
  pricingUpdate(by: PricingByInput!, input: PricingUpdateInput!): PricingUpdatePayload
}

enum OrderByDirection {
  ASC
  DESC
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Pricing {
  """when the model was created"""
  createdAt: DateTime!

  """Unique identifier"""
  id: ID!
  title: String!

  """when the model was updated"""
  updatedAt: DateTime!
  value: Float!
}

input PricingByInput {
  id: ID
}

type PricingConnection {
  edges: [PricingEdge]

  """Information to aid in pagination"""
  pageInfo: PageInfo!
}

"""Input to create a Pricing"""
input PricingCreateInput {
  title: String!
  value: Float!
}

type PricingCreatePayload {
  pricing: Pricing
}

type PricingDeletePayload {
  deletedId: ID!
}

type PricingEdge {
  cursor: String!
  node: Pricing!
}

input PricingOrderByInput {
  createdAt: OrderByDirection
}

"""Input to update a Pricing"""
input PricingUpdateInput {
  title: String
  value: FloatOperationsInput
}

type PricingUpdatePayload {
  pricing: Pricing
}

type Query {
  """Query a single KPI by an ID or a unique field"""
  kPI(
    """The field and value by which to query the KPI"""
    by: KPIByInput!
  ): KPI

  """Paginated query to fetch the whole list of `KPI`."""
  kPICollection(after: String, before: String, first: Int, last: Int, orderBy: KPIOrderByInput): KPIConnection

  """Query a single Pricing by an ID or a unique field"""
  pricing(
    """The field and value by which to query the Pricing"""
    by: PricingByInput!
  ): Pricing

  """Paginated query to fetch the whole list of `Pricing`."""
  pricingCollection(after: String, before: String, first: Int, last: Int, orderBy: PricingOrderByInput): PricingConnection
}
